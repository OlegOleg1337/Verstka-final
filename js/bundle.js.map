{"version":3,"file":"./js/bundle.js","mappings":"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","sources":["webpack://web-last-block/./src/js/index.js"],"sourcesContent":["import '../scss/style.scss'\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const sidebarMenu = document.getElementById('sidebarMenu')\n  const openMenuBtn = document.getElementById('openMenuBtn')\n  const closeMenuBtn = sidebarMenu ? sidebarMenu.querySelector('.close') : null\n  const mainContentWrapper = document.querySelector('.main-content-wrapper')\n  const body = document.body\n\n  const mobileBreakpoint = 767 // Соответствует $mobile-breakpoint в SCSS\n\n  // --- ЛОГИКА ДЛЯ БОКОВОГО МЕНЮ ---\n  function toggleMobileMenuClasses(action) {\n    if (sidebarMenu && mainContentWrapper && body) {\n      if (window.innerWidth <= mobileBreakpoint) {\n        if (action === 'add') {\n          sidebarMenu.classList.add('sidebar-menu--open')\n          mainContentWrapper.classList.add('main-content-wrapper--shifted')\n          body.classList.add('no-scroll')\n        } else {\n          sidebarMenu.classList.remove('sidebar-menu--open')\n          mainContentWrapper.classList.remove('main-content-wrapper--shifted')\n          body.classList.remove('no-scroll')\n        }\n      }\n    }\n  }\n\n  if (openMenuBtn) {\n    openMenuBtn.addEventListener('click', () => {\n      toggleMobileMenuClasses('add')\n    })\n  }\n\n  if (closeMenuBtn) {\n    closeMenuBtn.addEventListener('click', () => {\n      toggleMobileMenuClasses('remove')\n    })\n  }\n\n  document.addEventListener('click', (event) => {\n    if (window.innerWidth <= mobileBreakpoint && sidebarMenu && openMenuBtn) {\n      if (\n        sidebarMenu.classList.contains('sidebar-menu--open') &&\n        !sidebarMenu.contains(event.target) &&\n        !openMenuBtn.contains(event.target)\n      ) {\n        if (\n          mainContentWrapper.classList.contains(\n            'main-content-wrapper--shifted'\n          ) &&\n          event.target === mainContentWrapper\n        ) {\n          toggleMobileMenuClasses('remove')\n        }\n      }\n    }\n  })\n\n  // --- ЛОГИКА ДЛЯ КНОПКИ \"Читать дальше\" В ПЕРВОМ РАЗДЕЛЕ ---\n  const readMoreButton = document.getElementById('readMoreButton')\n  const olegMessage = document.getElementById('olegMessage')\n  const readMoreText = readMoreButton\n    ? readMoreButton.querySelector('span')\n    : null\n  const readMoreIcon = readMoreButton\n    ? readMoreButton.querySelector('img')\n    : null\n\n  if (readMoreButton && olegMessage && readMoreText && readMoreIcon) {\n    // Изначально скрываем, если это не сделано в CSS\n    olegMessage.style.display = 'none'\n\n    readMoreButton.addEventListener('click', (event) => {\n      event.preventDefault()\n\n      const isHidden =\n        olegMessage.style.display === 'none' || olegMessage.style.display === ''\n\n      if (isHidden) {\n        olegMessage.style.display = 'block'\n        readMoreText.textContent = 'Скрыть'\n        readMoreIcon.style.transform = 'rotate(180deg)'\n      } else {\n        olegMessage.style.display = 'none'\n        readMoreText.textContent = 'Читать дальше'\n        readMoreIcon.style.transform = 'rotate(0deg)'\n      }\n    })\n  }\n  // --- КОНЕЦ ЛОГИКИ ДЛЯ КНОПКИ \"Читать дальше\" ---\n\n  // --- ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ ДЛЯ SWIPER И КНОПОК \"ПОКАЗАТЬ ВСЕ\" ---\n  let brandsSwiper = null\n  let repairTypesSwiper = null\n  let pricingSwiper = null\n\n  const brandsToggleBtn = document.getElementById('toggleBrandsBtn')\n  const brandsToggleText = brandsToggleBtn\n    ? brandsToggleBtn.querySelector('.services__toggle-text')\n    : null\n  const brandsToggleIcon = brandsToggleBtn\n    ? brandsToggleBtn.querySelector('.services__toggle-icon')\n    : null\n  const brandsSwiperContainer = document.querySelector('.brands-swiper')\n  const allBrandsItems = document.querySelectorAll('.services__brands-item') // Все элементы брендов\n\n  const repairTypesShowAllContainer = document.querySelector(\n    '.repair-types-section .show-all'\n  )\n  const repairTypesToggleText = document.getElementById('toggleRepairTypesText')\n  const repairTypesToggleIcon = document.getElementById('toggleRepairTypesIcon')\n  const allRepairTypesCards = document.querySelectorAll(\n    '.repair-types-swiper .swiper-slide.card'\n  ) // Все карточки типов ремонта\n  const visibleRepairCardsCountDesktop = 4 // Количество карточек, которые изначально видимы на десктопе\n\n  // --- ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ/ДЕАКТИВАЦИИ SWIPER'ОВ И УПРАВЛЕНИЯ ВИДИМОСТЬЮ НА ДЕСКТОПЕ ---\n  function initSwipersAndDesktopLayout() {\n    if (window.innerWidth <= mobileBreakpoint) {\n      // --- НА МОБИЛЬНЫХ (SWIPER АКТИВЕН) ---\n      // Убедимся, что все элементы видимы для Swiper\n      allBrandsItems.forEach((item) => {\n        item.style.display = '' // Сбрасываем display, чтобы Swiper мог управлять\n        item.classList.remove('services__brands-item--hidden-on-load') // Убираем класс скрытия\n      })\n      allRepairTypesCards.forEach((item) => {\n        item.style.display = '' // Сбрасываем display, чтобы Swiper мог управлять\n        // Класс repair-types-item--hidden-on-load теперь не используется для скрытия в CSS,\n        // но убедимся, что он не мешает Swiper\n        item.classList.remove('repair-types-item--hidden-on-load')\n      })\n\n      // Деактивируем класс расширения для брендов\n      if (brandsSwiperContainer) {\n        brandsSwiperContainer.classList.remove(\n          'services__brands-grid--expanded'\n        )\n      }\n\n      // Скрываем кнопки \"Показать все\" на мобильных\n      if (brandsToggleBtn) brandsToggleBtn.style.display = 'none'\n      if (repairTypesShowAllContainer)\n        repairTypesShowAllContainer.style.display = 'none'\n\n      // Инициализация/активация Swiper для брендов\n      if (!brandsSwiper) {\n        brandsSwiper = new Swiper('.brands-swiper', {\n          direction: 'horizontal',\n          loop: false,\n          slidesPerView: 'auto',\n          spaceBetween: 16,\n          pagination: { el: '.brands-pagination', clickable: true }\n        })\n      } else {\n        brandsSwiper.enable()\n        brandsSwiper.update()\n      }\n\n      // Инициализация/активация Swiper для видов ремонта\n      if (!repairTypesSwiper) {\n        repairTypesSwiper = new Swiper('.repair-types-swiper', {\n          direction: 'horizontal',\n          loop: false,\n          slidesPerView: 'auto',\n          spaceBetween: 16,\n          pagination: { el: '.repair-types-pagination', clickable: true }\n        })\n      } else {\n        repairTypesSwiper.enable()\n        repairTypesSwiper.update()\n      }\n\n      // Управление Swiper для цен\n      const pricingDesktopContainer = document.querySelector(\n        '.pricing-container--desktop'\n      )\n      const pricingSwiperElement = document.querySelector('.pricing-swiper')\n      if (pricingDesktopContainer)\n        pricingDesktopContainer.style.display = 'none'\n      if (pricingSwiperElement) pricingSwiperElement.style.display = 'block'\n\n      if (!pricingSwiper) {\n        pricingSwiper = new Swiper('.pricing-swiper', {\n          direction: 'horizontal',\n          loop: false,\n          slidesPerView: 'auto',\n          spaceBetween: 16,\n          pagination: { el: '.pricing-pagination', clickable: true }\n        })\n      } else {\n        pricingSwiper.enable()\n        pricingSwiper.update()\n      }\n    } else {\n      // --- НА ДЕСКТОПЕ (GRID АКТИВЕН) ---\n      // Деактивация Swiper'ов\n      if (brandsSwiper) {\n        brandsSwiper.disable()\n      }\n      if (repairTypesSwiper) {\n        repairTypesSwiper.disable()\n      }\n      if (pricingSwiper) {\n        pricingSwiper.disable()\n      }\n\n      // Показываем десктопный контейнер цен, скрываем Swiper цен\n      const pricingDesktopContainer = document.querySelector(\n        '.pricing-container--desktop'\n      )\n      const pricingSwiperElement = document.querySelector('.pricing-swiper')\n      if (pricingDesktopContainer)\n        pricingDesktopContainer.style.display = 'block'\n      if (pricingSwiperElement) pricingSwiperElement.style.display = 'none'\n\n      // Показываем кнопки \"Показать все\" на десктопе\n      if (brandsToggleBtn) brandsToggleBtn.style.display = 'flex'\n      if (repairTypesShowAllContainer)\n        repairTypesShowAllContainer.style.display = 'flex'\n\n      // Сброс состояния \"Показать все\" для брендов на десктопе\n      // Важно: здесь класс services__brands-item--hidden-on-load в HTML\n      // и CSS-правила используются для управления видимостью.\n      if (brandsSwiperContainer) {\n        brandsSwiperContainer.classList.remove(\n          'services__brands-grid--expanded'\n        ) // Убираем класс расширения\n      }\n      allBrandsItems.forEach((item) => {\n        if (item.classList.contains('services__brands-item--hidden-on-load')) {\n          item.style.display = 'none' // Скрываем их, если у них есть этот класс\n        } else {\n          item.style.display = 'flex' // Убедимся, что видимые видны\n        }\n      })\n      if (brandsToggleText) {\n        brandsToggleText.textContent = 'Показать все'\n        brandsToggleIcon.style.transform = 'rotate(0deg)'\n      }\n\n      // Сброс состояния \"Показать все\" для типов ремонта на десктопе\n      // Здесь JS напрямую управляет display для всех карточек,\n      // основываясь на visibleRepairCardsCountDesktop\n      for (let i = 0; i < allRepairTypesCards.length; i++) {\n        if (i >= visibleRepairCardsCountDesktop) {\n          allRepairTypesCards[i].style.display = 'none' // Скрываем лишние на десктопе\n        } else {\n          allRepairTypesCards[i].style.display = 'flex' // Убедимся, что видимые видны\n        }\n      }\n      if (repairTypesToggleText) {\n        repairTypesToggleText.textContent = 'Показать все'\n        repairTypesToggleIcon.style.transform = 'rotate(0deg)'\n      }\n    }\n  }\n\n  // --- ИНИЦИАЛИЗАЦИЯ ПРИ ЗАГРУЗКЕ СТРАНИЦЫ ---\n  initSwipersAndDesktopLayout()\n\n  // --- ОБРАБОТЧИК ИЗМЕНЕНИЯ РАЗМЕРА ОКНА ---\n  window.addEventListener('resize', () => {\n    // При изменении размера, если переходим из мобильного в десктоп и наоборот,\n    // сбрасываем классы меню и переинициализируем Swiper'ы\n    if (window.innerWidth > mobileBreakpoint) {\n      if (sidebarMenu) sidebarMenu.classList.remove('sidebar-menu--open')\n      if (mainContentWrapper)\n        mainContentWrapper.classList.remove('main-content-wrapper--shifted')\n      if (body) body.classList.remove('no-scroll')\n    }\n    initSwipersAndDesktopLayout() // Переинициализация Swiper'ов\n  })\n\n  // --- ЛОГИКА ДЛЯ КНОПКИ \"Показать все\" в разделе брендов (работает только на десктопе) ---\n  if (\n    brandsToggleBtn &&\n    brandsSwiperContainer &&\n    brandsToggleText &&\n    brandsToggleIcon &&\n    allBrandsItems.length > 0 // Убедимся, что есть элементы\n  ) {\n    brandsToggleBtn.addEventListener('click', () => {\n      // Эта логика работает только на десктопе, когда Swiper выключен\n      if (window.innerWidth > mobileBreakpoint) {\n        const isExpanded = brandsSwiperContainer.classList.toggle(\n          'services__brands-grid--expanded'\n        )\n\n        // Итерируемся по всем элементам, чтобы показать/скрыть те, у которых есть класс hidden-on-load\n        allBrandsItems.forEach((item) => {\n          if (\n            item.classList.contains('services__brands-item--hidden-on-load')\n          ) {\n            if (isExpanded) {\n              item.style.display = 'flex' // Показываем скрытые элементы\n            } else {\n              item.style.display = 'none' // Скрываем элементы\n            }\n          }\n        })\n\n        if (isExpanded) {\n          brandsToggleText.textContent = 'Скрыть'\n          brandsToggleIcon.style.transform = 'rotate(180deg)'\n        } else {\n          brandsToggleText.textContent = 'Показать все'\n          brandsToggleIcon.style.transform = 'rotate(0deg)'\n        }\n      }\n    })\n  }\n\n  // --- ЛОГИКА ДЛЯ КНОПКИ \"Показать все\" В РАЗДЕЛЕ \"РЕМОНТ РАЗЛИЧНЫХ ВИДОВ ТЕХНИКИ\" (работает только на десктопе) ---\n  if (\n    repairTypesShowAllContainer &&\n    repairTypesToggleText &&\n    repairTypesToggleIcon &&\n    allRepairTypesCards.length > 0\n  ) {\n    repairTypesShowAllContainer.addEventListener('click', (event) => {\n      event.preventDefault()\n\n      // Эта логика работает только на десктопе, когда Swiper выключен\n      if (window.innerWidth > mobileBreakpoint) {\n        // Проверяем, скрыта ли хоть одна из дополнительных карточек\n        const isCurrentlyHidden =\n          allRepairTypesCards[visibleRepairCardsCountDesktop] &&\n          (allRepairTypesCards[visibleRepairCardsCountDesktop].style.display ===\n            'none' ||\n            allRepairTypesCards[visibleRepairCardsCountDesktop].style\n              .display === '')\n\n        if (isCurrentlyHidden) {\n          for (\n            let i = visibleRepairCardsCountDesktop;\n            i < allRepairTypesCards.length;\n            i++\n          ) {\n            allRepairTypesCards[i].style.display = 'flex'\n          }\n          repairTypesToggleText.textContent = 'Скрыть'\n          repairTypesToggleIcon.style.transform = 'rotate(180deg)'\n        } else {\n          for (\n            let i = visibleRepairCardsCountDesktop;\n            i < allRepairTypesCards.length;\n            i++\n          ) {\n            allRepairTypesCards[i].style.display = 'none'\n          }\n          repairTypesToggleText.textContent = 'Показать все'\n          repairTypesToggleIcon.style.transform = 'rotate(0deg)'\n        }\n      }\n    })\n  }\n  // --- КОНЕЦ ЛОГИКИ ДЛЯ КНОПКИ \"Показать все\" В РАЗДЕЛЕ \"РЕМОНТ РАЗЛИЧНЫХ ВИДОВ ТЕХНИКИ\" ---\n\n  // Логика для кнопок \"Заказать\"\n  document.querySelectorAll('.order-btn').forEach((btn) => {\n    btn.addEventListener('click', function () {\n      this.style.transform = 'scale(0.95)'\n      setTimeout(() => {\n        this.style.transform = 'scale(1)'\n      }, 150)\n\n      const serviceNameElement =\n        this.closest('.pricing-item').querySelector('.service-name')\n      if (serviceNameElement) {\n        console.log('Заказ услуги:', serviceNameElement.textContent)\n      } else {\n        console.log('Заказ услуги: Название услуги не найдено')\n      }\n    })\n  })\n})\n"],"names":["document","addEventListener","sidebarMenu","getElementById","openMenuBtn","closeMenuBtn","querySelector","mainContentWrapper","body","mobileBreakpoint","toggleMobileMenuClasses","action","window","innerWidth","classList","add","remove","event","contains","target","readMoreButton","olegMessage","readMoreText","readMoreIcon","style","display","preventDefault","textContent","transform","brandsSwiper","repairTypesSwiper","pricingSwiper","brandsToggleBtn","brandsToggleText","brandsToggleIcon","brandsSwiperContainer","allBrandsItems","querySelectorAll","repairTypesShowAllContainer","repairTypesToggleText","repairTypesToggleIcon","allRepairTypesCards","initSwipersAndDesktopLayout","forEach","item","enable","update","Swiper","direction","loop","slidesPerView","spaceBetween","pagination","el","clickable","pricingDesktopContainer","pricingSwiperElement","disable","i","length","isExpanded","toggle","btn","this","setTimeout","serviceNameElement","closest","console","log"],"sourceRoot":""}